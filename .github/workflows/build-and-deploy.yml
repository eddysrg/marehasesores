name: Build and Deploy Frontend - Hostinger (Git Pull Method)

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    # Opcional: Subir artifact para debugging
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7
        
    - name: Create backup and prepare deployment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        script: |
          cd domains/marehasesores.com/public_html
          
          # Crear backup solo si existen archivos (excluyendo api y .git)
          if [ "$(ls -A . 2>/dev/null | grep -v -E '^(api|\.git)$')" ]; then
            mkdir -p ../backups
            tar -czf ../backups/frontend-backup-$(date +%Y%m%d-%H%M%S).tar.gz \
                --exclude='api' \
                --exclude='.git' \
                --exclude='node_modules' \
                --exclude='.env' .
            echo "✅ Backup created"
            
            # Limpiar backups antiguos (mantener últimos 5)
            cd ../backups
            ls -t frontend-backup-*.tar.gz | tail -n +6 | xargs rm -f 2>/dev/null || true
            cd ../public_html
          fi
          
    - name: Git pull and deploy
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 180s
        script: |
          cd domains/marehasesores.com/public_html
          
          # Preservar directorio API (CRÍTICO - NO TOCAR)
          API_EXISTS=false
          if [ -d "api" ]; then
            echo "📁 API directory found - creating secure backup"
            cp -r api ../api-backup-secure
            API_EXISTS=true
            echo "✅ API backup completed"
          fi
          
          # Inicializar git si no existe
          if [ ! -d ".git" ]; then
            echo "🔧 Initializing git repository"
            git init
            git remote add origin git@github.com:${{ github.repository }}.git
          fi
          
          # Configurar git para ignorar la carpeta api
          echo "api/" >> .gitignore 2>/dev/null || true
          echo ".gitignore updated to ignore API directory"
          
          # Hacer git pull PRESERVANDO la carpeta api
          echo "📥 Pulling latest changes from ${{ github.ref_name }}"
          git fetch origin ${{ github.ref_name }}
          
          # Reset pero preservando api
          if [ "$API_EXISTS" = true ]; then
            git reset --hard origin/${{ github.ref_name }}
            echo "⚠️ Git reset completed - API will be restored"
          else
            git reset --hard origin/${{ github.ref_name }}
          fi
          
          # Verificar que tenemos Node.js disponible
          if command -v node >/dev/null 2>&1; then
            NODE_VERSION=$(node --version)
            echo "📦 Node.js version: $NODE_VERSION"
            
            # Instalar dependencias y hacer build
            if [ -f "package.json" ]; then
              echo "📦 Installing dependencies"
              npm ci --only=production
              
              echo "🏗️ Building project"
              npm run build
              
              # Mover archivos del dist a la raíz (CUIDANDO LA CARPETA API)
              if [ -d "dist" ]; then
                echo "📁 Moving dist files to root (preserving API)"
                
                # NUNCA tocar la carpeta api
                if [ -d "api" ]; then
                  echo "⚠️ API directory detected - will be preserved"
                fi
                
                # Mover archivos de dist excluyendo cualquier conflicto con api
                find dist -type f -exec cp {} . \; 2>/dev/null || true
                find dist -type d -mindepth 1 -not -name "api" -exec cp -r {} . \; 2>/dev/null || true
                
                rm -rf dist
                echo "✅ Dist files moved to root (API untouched)"
              fi
            else
              echo "⚠️ No package.json found, skipping build"
            fi
          else
            echo "⚠️ Node.js not available on server, build step skipped"
            echo "💡 Make sure Node.js is installed on your hosting server"
          fi
          
          # Restaurar directorio API (CRÍTICO)
          if [ "$API_EXISTS" = true ] && [ -d "../api-backup-secure" ]; then
            echo "📁 Restoring API directory from secure backup"
            rm -rf api 2>/dev/null || true  # Solo por si acaso
            cp -r ../api-backup-secure api
            rm -rf ../api-backup-secure
            echo "✅ API directory fully restored"
          elif [ ! -d "api" ]; then
            # Solo crear si definitivamente no existe
            mkdir -p api
            echo "📁 Created empty API directory"
          fi
          
          # Verificar que API está intacta
          if [ -d "api" ]; then
            echo "✅ API directory confirmed present"
            ls -la api/ | head -5 || echo "API directory is empty"
          fi
          
          # Limpiar archivos temporales (SIN TOCAR API)
          rm -rf node_modules .github package*.json tsconfig*.json astro.config.* 2>/dev/null || true
          
          # Verificar que API sigue intacta después de la limpieza
          if [ -d "api" ]; then
            echo "✅ API directory preserved after cleanup"
          else
            echo "❌ WARNING: API directory missing after cleanup!"
          fi
          
          echo "🧹 Cleanup completed (API preserved)"
